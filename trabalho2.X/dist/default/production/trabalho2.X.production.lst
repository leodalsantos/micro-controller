

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Jun 17 11:17:09 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    22  0000                     
    23                           ; Version 1.41
    24                           ; Generated 25/01/2017 GMT
    25                           ; 
    26                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4520 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     _ADCON1	set	4033
    58  0000                     _TRISB	set	3987
    59  0000                     _TRISE	set	3990
    60  0000                     _TRISD	set	3989
    61  0000                     _INTCONbits	set	4082
    62  0000                     _RE1	set	31777
    63  0000                     _RE2	set	31778
    64  0000                     _RD7	set	31775
    65  0000                     _RD6	set	31774
    66  0000                     _RD5	set	31773
    67  0000                     _RD4	set	31772
    68                           
    69                           	psect	smallconst
    70  000600                     __psmallconst:
    71                           	opt stack 0
    72  000600  00                 	db	0
    73  000601                     STR_1:
    74  000601  45                 	db	69	;'E'
    75  000602  71                 	db	113	;'q'
    76  000603  75                 	db	117	;'u'
    77  000604  69                 	db	105	;'i'
    78  000605  70                 	db	112	;'p'
    79  000606  61                 	db	97	;'a'
    80  000607  6D                 	db	109	;'m'
    81  000608  65                 	db	101	;'e'
    82  000609  6E                 	db	110	;'n'
    83  00060A  74                 	db	116	;'t'
    84  00060B  6F                 	db	111	;'o'
    85  00060C  20                 	db	32
    86  00060D  65                 	db	101	;'e'
    87  00060E  6D                 	db	109	;'m'
    88  00060F  00                 	db	0
    89  000610                     STR_3:
    90  000610  45                 	db	69	;'E'
    91  000611  6E                 	db	110	;'n'
    92  000612  74                 	db	116	;'t'
    93  000613  72                 	db	114	;'r'
    94  000614  61                 	db	97	;'a'
    95  000615  6E                 	db	110	;'n'
    96  000616  64                 	db	100	;'d'
    97  000617  6F                 	db	111	;'o'
    98  000618  20                 	db	32
    99  000619  65                 	db	101	;'e'
   100  00061A  6D                 	db	109	;'m'
   101  00061B  00                 	db	0
   102  00061C                     STR_4:
   103  00061C  6F                 	db	111	;'o'
   104  00061D  70                 	db	112	;'p'
   105  00061E  65                 	db	101	;'e'
   106  00061F  72                 	db	114	;'r'
   107  000620  61                 	db	97	;'a'
   108  000621  63                 	db	99	;'c'
   109  000622  61                 	db	97	;'a'
   110  000623  6F                 	db	111	;'o'
   111  000624  00                 	db	0
   112  000625                     STR_2:
   113  000625  53                 	db	83	;'S'
   114  000626  74                 	db	116	;'t'
   115  000627  61                 	db	97	;'a'
   116  000628  6E                 	db	110	;'n'
   117  000629  64                 	db	100	;'d'
   118  00062A  62                 	db	98	;'b'
   119  00062B  79                 	db	121	;'y'
   120  00062C  00                 	db	0
   121                           
   122                           ; #config settings
   123  00062D  00                 	db	0	; dummy byte at the end
   124  0000                     
   125                           	psect	cinit
   126  0008D4                     __pcinit:
   127                           	opt stack 0
   128  0008D4                     start_initialization:
   129                           	opt stack 0
   130  0008D4                     __initialization:
   131                           	opt stack 0
   132                           
   133                           ; Clear objects allocated to COMRAM (1 bytes)
   134  0008D4  6A19               	clrf	__pbssCOMRAM& (0+255),c
   135  0008D6                     end_of_initialization:
   136                           	opt stack 0
   137  0008D6                     __end_of__initialization:
   138                           	opt stack 0
   139  0008D6  901A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   140  0008D8  921A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   141  0008DA  0E00               	movlw	low (__Lsmallconst shr (0+16))
   142  0008DC  6EF8               	movwf	tblptru,c
   143  0008DE  0E06               	movlw	high __Lsmallconst
   144  0008E0  6EF7               	movwf	tblptrh,c
   145  0008E2  0100               	movlb	0
   146  0008E4  EF17  F003         	goto	_main	;jump to C main() function
   147                           tblptru	equ	0xFF8
   148                           tblptrh	equ	0xFF7
   149                           
   150                           	psect	bssCOMRAM
   151  000019                     __pbssCOMRAM:
   152                           	opt stack 0
   153  000019                     _op:
   154                           	opt stack 0
   155  000019                     	ds	1
   156                           tblptru	equ	0xFF8
   157                           tblptrh	equ	0xFF7
   158                           
   159                           	psect	cstackCOMRAM
   160  000001                     __pcstackCOMRAM:
   161                           	opt stack 0
   162  000001                     ??_isr:
   163  000001                     
   164                           ; 2 bytes @ 0x0
   165  000001                     	ds	14
   166  00000F                     Lcd_Port@a:
   167                           	opt stack 0
   168                           
   169                           ; 1 bytes @ 0xE
   170  00000F                     	ds	1
   171  000010                     ??_Lcd_Cmd:
   172  000010                     Lcd_Write_Char@temp:
   173                           	opt stack 0
   174                           
   175                           ; 1 bytes @ 0xF
   176  000010                     	ds	1
   177  000011                     Lcd_Cmd@a:
   178                           	opt stack 0
   179  000011                     Lcd_Write_Char@y:
   180                           	opt stack 0
   181                           
   182                           ; 1 bytes @ 0x10
   183  000011                     	ds	1
   184  000012                     ??_Lcd_Init:
   185  000012                     Lcd_Set_Cursor@b:
   186                           	opt stack 0
   187  000012                     Lcd_Write_Char@a:
   188                           	opt stack 0
   189                           
   190                           ; 1 bytes @ 0x11
   191  000012                     	ds	1
   192  000013                     Lcd_Set_Cursor@a:
   193                           	opt stack 0
   194  000013                     Lcd_Write_String@a:
   195                           	opt stack 0
   196                           
   197                           ; 2 bytes @ 0x12
   198  000013                     	ds	1
   199  000014                     Lcd_Set_Cursor@z:
   200                           	opt stack 0
   201                           
   202                           ; 1 bytes @ 0x13
   203  000014                     	ds	1
   204  000015                     ??_Lcd_Write_String:
   205  000015                     Lcd_Set_Cursor@y:
   206                           	opt stack 0
   207                           
   208                           ; 1 bytes @ 0x14
   209  000015                     	ds	1
   210  000016                     Lcd_Set_Cursor@temp:
   211                           	opt stack 0
   212                           
   213                           ; 1 bytes @ 0x15
   214  000016                     	ds	1
   215  000017                     Lcd_Write_String@i:
   216                           	opt stack 0
   217                           
   218                           ; 2 bytes @ 0x16
   219  000017                     	ds	2
   220  000019                     tblptru	equ	0xFF8
   221                           tblptrh	equ	0xFF7
   222                           
   223                           ; 1 bytes @ 0x18
   224 ;;
   225 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   226 ;;
   227 ;; *************** function _main *****************
   228 ;; Defined at:
   229 ;;		line 36 in file "trabalho2.c"
   230 ;; Parameters:    Size  Location     Type
   231 ;;		None
   232 ;; Auto vars:     Size  Location     Type
   233 ;;		None
   234 ;; Return value:  Size  Location     Type
   235 ;;                  2   73[None  ] int 
   236 ;; Registers used:
   237 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   238 ;; Tracked objects:
   239 ;;		On entry : 0/0
   240 ;;		On exit  : 0/0
   241 ;;		Unchanged: 0/0
   242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   243 ;;      Params:         0       0       0       0       0       0       0
   244 ;;      Locals:         0       0       0       0       0       0       0
   245 ;;      Temps:          0       0       0       0       0       0       0
   246 ;;      Totals:         0       0       0       0       0       0       0
   247 ;;Total ram usage:        0 bytes
   248 ;; Hardware stack levels required when called:    4
   249 ;; This function calls:
   250 ;;		_Lcd_Clear
   251 ;;		_Lcd_Init
   252 ;;		_Lcd_Set_Cursor
   253 ;;		_Lcd_Write_String
   254 ;; This function is called by:
   255 ;;		Startup code after reset
   256 ;; This function uses a non-reentrant model
   257 ;;
   258                           
   259                           	psect	text0
   260  00062E                     __ptext0:
   261                           	opt stack 0
   262  00062E                     _main:
   263                           	opt stack 27
   264                           
   265                           ;trabalho2.c: 38: op = 0;
   266                           
   267                           ;incstack = 0
   268  00062E  0E00               	movlw	0
   269  000630  6E19               	movwf	_op,c
   270                           
   271                           ;trabalho2.c: 40: TRISD = 0x00;
   272  000632  0E00               	movlw	0
   273  000634  6E95               	movwf	3989,c	;volatile
   274                           
   275                           ;trabalho2.c: 41: TRISE = 0xF9;
   276  000636  0EF9               	movlw	249
   277  000638  6E96               	movwf	3990,c	;volatile
   278                           
   279                           ;trabalho2.c: 42: TRISB = 0xFF;
   280  00063A  6893               	setf	3987,c	;volatile
   281                           
   282                           ;trabalho2.c: 43: ADCON1 = 0xFF;
   283  00063C  68C1               	setf	4033,c	;volatile
   284                           
   285                           ;trabalho2.c: 45: Lcd_Init();
   286  00063E  ECA3  F003         	call	_Lcd_Init	;wreg free
   287                           
   288                           ;trabalho2.c: 46: Lcd_Clear();
   289  000642  EC74  F004         	call	_Lcd_Clear	;wreg free
   290                           
   291                           ;trabalho2.c: 48: INTCONbits.INT0IE = 1;
   292  000646  88F2               	bsf	intcon,4,c	;volatile
   293                           
   294                           ;trabalho2.c: 49: INTCONbits.INT0IF = 0;
   295  000648  92F2               	bcf	intcon,1,c	;volatile
   296                           
   297                           ;trabalho2.c: 51: INTCONbits.PEIE = 1;
   298  00064A  8CF2               	bsf	intcon,6,c	;volatile
   299                           
   300                           ;trabalho2.c: 52: INTCONbits.GIE = 1;
   301  00064C  8EF2               	bsf	intcon,7,c	;volatile
   302                           
   303                           ;trabalho2.c: 54: while (!op)
   304  00064E  D016               	goto	l888
   305  000650                     l882:
   306                           
   307                           ;trabalho2.c: 55: {
   308                           ;trabalho2.c: 56: Lcd_Set_Cursor(1,2);
   309  000650  0E02               	movlw	2
   310  000652  6E12               	movwf	Lcd_Set_Cursor@b,c
   311  000654  0E01               	movlw	1
   312  000656  ECDB  F003         	call	_Lcd_Set_Cursor
   313                           
   314                           ;trabalho2.c: 57: Lcd_Write_String("Equipamento em");
   315  00065A  0E01               	movlw	low STR_1
   316  00065C  6E13               	movwf	Lcd_Write_String@a,c
   317  00065E  0E06               	movlw	high STR_1
   318  000660  6E14               	movwf	Lcd_Write_String@a+1,c
   319  000662  EC03  F004         	call	_Lcd_Write_String	;wreg free
   320                           
   321                           ;trabalho2.c: 58: Lcd_Set_Cursor(2,5);
   322  000666  0E05               	movlw	5
   323  000668  6E12               	movwf	Lcd_Set_Cursor@b,c
   324  00066A  0E02               	movlw	2
   325  00066C  ECDB  F003         	call	_Lcd_Set_Cursor
   326                           
   327                           ;trabalho2.c: 59: Lcd_Write_String("Standby");
   328  000670  0E25               	movlw	low STR_2
   329  000672  6E13               	movwf	Lcd_Write_String@a,c
   330  000674  0E06               	movlw	high STR_2
   331  000676  6E14               	movwf	Lcd_Write_String@a+1,c
   332  000678  EC03  F004         	call	_Lcd_Write_String	;wreg free
   333  00067C                     l888:
   334  00067C  5019               	movf	_op,w,c
   335  00067E  A4D8               	btfss	status,2,c
   336  000680  D017               	goto	l896
   337  000682  D7E6               	goto	l882
   338  000684                     l890:
   339                           
   340                           ;trabalho2.c: 63: {
   341                           ;trabalho2.c: 64: Lcd_Set_Cursor(1,2);
   342  000684  0E02               	movlw	2
   343  000686  6E12               	movwf	Lcd_Set_Cursor@b,c
   344  000688  0E01               	movlw	1
   345  00068A  ECDB  F003         	call	_Lcd_Set_Cursor
   346                           
   347                           ;trabalho2.c: 65: Lcd_Write_String("Entrando em");
   348  00068E  0E10               	movlw	low STR_3
   349  000690  6E13               	movwf	Lcd_Write_String@a,c
   350  000692  0E06               	movlw	high STR_3
   351  000694  6E14               	movwf	Lcd_Write_String@a+1,c
   352  000696  EC03  F004         	call	_Lcd_Write_String	;wreg free
   353                           
   354                           ;trabalho2.c: 66: Lcd_Set_Cursor(2,2);
   355  00069A  0E02               	movlw	2
   356  00069C  6E12               	movwf	Lcd_Set_Cursor@b,c
   357  00069E  0E02               	movlw	2
   358  0006A0  ECDB  F003         	call	_Lcd_Set_Cursor
   359                           
   360                           ;trabalho2.c: 67: Lcd_Write_String("operacao");
   361  0006A4  0E1C               	movlw	low STR_4
   362  0006A6  6E13               	movwf	Lcd_Write_String@a,c
   363  0006A8  0E06               	movlw	high STR_4
   364  0006AA  6E14               	movwf	Lcd_Write_String@a+1,c
   365  0006AC  EC03  F004         	call	_Lcd_Write_String	;wreg free
   366  0006B0                     l896:
   367  0006B0  5019               	movf	_op,w,c
   368  0006B2  B4D8               	btfsc	status,2,c
   369  0006B4  EF07  F000         	goto	start
   370  0006B8  D7E5               	goto	l890
   371  0006BA                     __end_of_main:
   372                           	opt stack 0
   373                           tblptru	equ	0xFF8
   374                           tblptrh	equ	0xFF7
   375                           intcon	equ	0xFF2
   376                           status	equ	0xFD8
   377                           
   378 ;; *************** function _Lcd_Write_String *****************
   379 ;; Defined at:
   380 ;;		line 97 in file "lcd.h"
   381 ;; Parameters:    Size  Location     Type
   382 ;;  a               2   18[COMRAM] PTR unsigned char 
   383 ;;		 -> STR_4(9), STR_3(12), STR_2(8), STR_1(15), 
   384 ;; Auto vars:     Size  Location     Type
   385 ;;  i               2   22[COMRAM] int 
   386 ;; Return value:  Size  Location     Type
   387 ;;                  1    wreg      void 
   388 ;; Registers used:
   389 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   390 ;; Tracked objects:
   391 ;;		On entry : 0/0
   392 ;;		On exit  : 0/0
   393 ;;		Unchanged: 0/0
   394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   395 ;;      Params:         2       0       0       0       0       0       0
   396 ;;      Locals:         2       0       0       0       0       0       0
   397 ;;      Temps:          2       0       0       0       0       0       0
   398 ;;      Totals:         6       0       0       0       0       0       0
   399 ;;Total ram usage:        6 bytes
   400 ;; Hardware stack levels used:    1
   401 ;; Hardware stack levels required when called:    3
   402 ;; This function calls:
   403 ;;		_Lcd_Write_Char
   404 ;; This function is called by:
   405 ;;		_main
   406 ;; This function uses a non-reentrant model
   407 ;;
   408                           
   409                           	psect	text1
   410  000806                     __ptext1:
   411                           	opt stack 0
   412  000806                     _Lcd_Write_String:
   413                           	opt stack 27
   414                           
   415                           ;lcd.h: 99: int i;
   416                           ;lcd.h: 100: for(i=0;a[i]!='\0';i++)
   417                           
   418                           ;incstack = 0
   419  000806  0E00               	movlw	0
   420  000808  6E18               	movwf	Lcd_Write_String@i+1,c
   421  00080A  0E00               	movlw	0
   422  00080C  6E17               	movwf	Lcd_Write_String@i,c
   423  00080E  D010               	goto	l862
   424  000810                     l858:
   425                           
   426                           ;lcd.h: 101: Lcd_Write_Char(a[i]);
   427  000810  5017               	movf	Lcd_Write_String@i,w,c
   428  000812  2413               	addwf	Lcd_Write_String@a,w,c
   429  000814  6E15               	movwf	??_Lcd_Write_String& (0+255),c
   430  000816  5018               	movf	Lcd_Write_String@i+1,w,c
   431  000818  2014               	addwfc	Lcd_Write_String@a+1,w,c
   432  00081A  6E16               	movwf	(??_Lcd_Write_String+1)& (0+255),c
   433  00081C  C015  FFF6         	movff	??_Lcd_Write_String,tblptrl
   434  000820  C016  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
   435  000824                     	if	0	;tblptru may be non-zero
   436  000824                     	endif
   437  000824                     	if	0	;tblptru may be non-zero
   438  000824                     	endif
   439  000824  0008               	tblrd		*
   440  000826  50F5               	movf	tablat,w,c
   441  000828  EC28  F004         	call	_Lcd_Write_Char
   442  00082C  4A17               	infsnz	Lcd_Write_String@i,f,c
   443  00082E  2A18               	incf	Lcd_Write_String@i+1,f,c
   444  000830                     l862:
   445  000830  5017               	movf	Lcd_Write_String@i,w,c
   446  000832  2413               	addwf	Lcd_Write_String@a,w,c
   447  000834  6E15               	movwf	??_Lcd_Write_String& (0+255),c
   448  000836  5018               	movf	Lcd_Write_String@i+1,w,c
   449  000838  2014               	addwfc	Lcd_Write_String@a+1,w,c
   450  00083A  6E16               	movwf	(??_Lcd_Write_String+1)& (0+255),c
   451  00083C  C015  FFF6         	movff	??_Lcd_Write_String,tblptrl
   452  000840  C016  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
   453  000844                     	if	0	;tblptru may be non-zero
   454  000844                     	endif
   455  000844                     	if	0	;tblptru may be non-zero
   456  000844                     	endif
   457  000844  0008               	tblrd		*
   458  000846  50F5               	movf	tablat,w,c
   459  000848  0900               	iorlw	0
   460  00084A  B4D8               	btfsc	status,2,c
   461  00084C  0012               	return	
   462  00084E  D7E0               	goto	l858
   463  000850                     __end_of_Lcd_Write_String:
   464                           	opt stack 0
   465                           tblptru	equ	0xFF8
   466                           tblptrh	equ	0xFF7
   467                           tblptrl	equ	0xFF6
   468                           tablat	equ	0xFF5
   469                           intcon	equ	0xFF2
   470                           status	equ	0xFD8
   471                           
   472 ;; *************** function _Lcd_Write_Char *****************
   473 ;; Defined at:
   474 ;;		line 81 in file "lcd.h"
   475 ;; Parameters:    Size  Location     Type
   476 ;;  a               1    wreg     unsigned char 
   477 ;; Auto vars:     Size  Location     Type
   478 ;;  a               1   17[COMRAM] unsigned char 
   479 ;;  y               1   16[COMRAM] unsigned char 
   480 ;;  temp            1   15[COMRAM] unsigned char 
   481 ;; Return value:  Size  Location     Type
   482 ;;                  1    wreg      void 
   483 ;; Registers used:
   484 ;;		wreg, status,2, status,0, cstack
   485 ;; Tracked objects:
   486 ;;		On entry : 0/0
   487 ;;		On exit  : 0/0
   488 ;;		Unchanged: 0/0
   489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   490 ;;      Params:         0       0       0       0       0       0       0
   491 ;;      Locals:         3       0       0       0       0       0       0
   492 ;;      Temps:          0       0       0       0       0       0       0
   493 ;;      Totals:         3       0       0       0       0       0       0
   494 ;;Total ram usage:        3 bytes
   495 ;; Hardware stack levels used:    1
   496 ;; Hardware stack levels required when called:    2
   497 ;; This function calls:
   498 ;;		_Lcd_Port
   499 ;; This function is called by:
   500 ;;		_Lcd_Write_String
   501 ;; This function uses a non-reentrant model
   502 ;;
   503                           
   504                           	psect	text2
   505  000850                     __ptext2:
   506                           	opt stack 0
   507  000850                     _Lcd_Write_Char:
   508                           	opt stack 27
   509                           
   510                           ;incstack = 0
   511                           ;Lcd_Write_Char@a stored from wreg
   512  000850  6E12               	movwf	Lcd_Write_Char@a,c
   513                           
   514                           ;lcd.h: 83: char temp,y;
   515                           ;lcd.h: 84: temp = a&0x0F;
   516  000852  5012               	movf	Lcd_Write_Char@a,w,c
   517  000854  0B0F               	andlw	15
   518  000856  6E10               	movwf	Lcd_Write_Char@temp,c
   519                           
   520                           ;lcd.h: 85: y = a&0xF0;
   521  000858  5012               	movf	Lcd_Write_Char@a,w,c
   522  00085A  0BF0               	andlw	240
   523  00085C  6E11               	movwf	Lcd_Write_Char@y,c
   524                           
   525                           ;lcd.h: 86: RE2 = 1;
   526  00085E  8484               	bsf	3972,2,c	;volatile
   527                           
   528                           ;lcd.h: 87: Lcd_Port(y>>4);
   529  000860  3811               	swapf	Lcd_Write_Char@y,w,c
   530  000862  0B0F               	andlw	15
   531  000864  EC44  F004         	call	_Lcd_Port
   532                           
   533                           ;lcd.h: 88: RE1 = 1;
   534  000868  8284               	bsf	3972,1,c	;volatile
   535                           
   536                           ;lcd.h: 89: _delay((unsigned long)((40)*(8000000/4000000.0)));
   537  00086A  0E1A               	movlw	26
   538  00086C                     u197:
   539  00086C  2EE8               	decfsz	wreg,f,c
   540  00086E  D7FE               	bra	u197
   541  000870  D000               	nop2	
   542                           
   543                           ;lcd.h: 90: RE1 = 0;
   544  000872  9284               	bcf	3972,1,c	;volatile
   545                           
   546                           ;lcd.h: 91: Lcd_Port(temp);
   547  000874  5010               	movf	Lcd_Write_Char@temp,w,c
   548  000876  EC44  F004         	call	_Lcd_Port
   549                           
   550                           ;lcd.h: 92: RE1 = 1;
   551  00087A  8284               	bsf	3972,1,c	;volatile
   552                           
   553                           ;lcd.h: 93: _delay((unsigned long)((40)*(8000000/4000000.0)));
   554  00087C  0E1A               	movlw	26
   555  00087E                     u207:
   556  00087E  2EE8               	decfsz	wreg,f,c
   557  000880  D7FE               	bra	u207
   558  000882  D000               	nop2	
   559                           
   560                           ;lcd.h: 94: RE1 = 0;
   561  000884  9284               	bcf	3972,1,c	;volatile
   562  000886  0012               	return		;funcret
   563  000888                     __end_of_Lcd_Write_Char:
   564                           	opt stack 0
   565                           tblptru	equ	0xFF8
   566                           tblptrh	equ	0xFF7
   567                           tblptrl	equ	0xFF6
   568                           tablat	equ	0xFF5
   569                           intcon	equ	0xFF2
   570                           wreg	equ	0xFE8
   571                           status	equ	0xFD8
   572                           
   573 ;; *************** function _Lcd_Set_Cursor *****************
   574 ;; Defined at:
   575 ;;		line 41 in file "lcd.h"
   576 ;; Parameters:    Size  Location     Type
   577 ;;  a               1    wreg     unsigned char 
   578 ;;  b               1   17[COMRAM] unsigned char 
   579 ;; Auto vars:     Size  Location     Type
   580 ;;  a               1   18[COMRAM] unsigned char 
   581 ;;  temp            1   21[COMRAM] unsigned char 
   582 ;;  y               1   20[COMRAM] unsigned char 
   583 ;;  z               1   19[COMRAM] unsigned char 
   584 ;; Return value:  Size  Location     Type
   585 ;;                  1    wreg      void 
   586 ;; Registers used:
   587 ;;		wreg, status,2, status,0, cstack
   588 ;; Tracked objects:
   589 ;;		On entry : 0/0
   590 ;;		On exit  : 0/0
   591 ;;		Unchanged: 0/0
   592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   593 ;;      Params:         1       0       0       0       0       0       0
   594 ;;      Locals:         4       0       0       0       0       0       0
   595 ;;      Temps:          0       0       0       0       0       0       0
   596 ;;      Totals:         5       0       0       0       0       0       0
   597 ;;Total ram usage:        5 bytes
   598 ;; Hardware stack levels used:    1
   599 ;; Hardware stack levels required when called:    3
   600 ;; This function calls:
   601 ;;		_Lcd_Cmd
   602 ;; This function is called by:
   603 ;;		_main
   604 ;; This function uses a non-reentrant model
   605 ;;
   606                           
   607                           	psect	text3
   608  0007B6                     __ptext3:
   609                           	opt stack 0
   610  0007B6                     _Lcd_Set_Cursor:
   611                           	opt stack 27
   612                           
   613                           ;incstack = 0
   614                           ;Lcd_Set_Cursor@a stored from wreg
   615  0007B6  6E13               	movwf	Lcd_Set_Cursor@a,c
   616                           
   617                           ;lcd.h: 43: char temp,z,y;
   618                           ;lcd.h: 44: if(a == 1)
   619  0007B8  0413               	decf	Lcd_Set_Cursor@a,w,c
   620  0007BA  A4D8               	btfss	status,2,c
   621  0007BC  D010               	goto	l848
   622                           
   623                           ;lcd.h: 45: {
   624                           ;lcd.h: 46: temp = 0x80 + b - 1;
   625  0007BE  5012               	movf	Lcd_Set_Cursor@b,w,c
   626  0007C0  0F7F               	addlw	127
   627  0007C2  6E16               	movwf	Lcd_Set_Cursor@temp,c
   628                           
   629                           ;lcd.h: 47: z = temp>>4;
   630  0007C4  3816               	swapf	Lcd_Set_Cursor@temp,w,c
   631  0007C6  0B0F               	andlw	15
   632  0007C8  6E14               	movwf	Lcd_Set_Cursor@z,c
   633                           
   634                           ;lcd.h: 48: y = temp & 0x0F;
   635  0007CA  5016               	movf	Lcd_Set_Cursor@temp,w,c
   636  0007CC  0B0F               	andlw	15
   637  0007CE  6E15               	movwf	Lcd_Set_Cursor@y,c
   638                           
   639                           ;lcd.h: 49: Lcd_Cmd(z);
   640  0007D0  5014               	movf	Lcd_Set_Cursor@z,w,c
   641  0007D2  EC5A  F004         	call	_Lcd_Cmd
   642                           
   643                           ;lcd.h: 50: Lcd_Cmd(y);
   644  0007D6  5015               	movf	Lcd_Set_Cursor@y,w,c
   645  0007D8  EC5A  F004         	call	_Lcd_Cmd
   646                           
   647                           ;lcd.h: 51: }
   648  0007DC  0012               	return	
   649  0007DE                     l848:
   650                           
   651                           ;lcd.h: 52: else if(a == 2)
   652  0007DE  0E02               	movlw	2
   653  0007E0  1813               	xorwf	Lcd_Set_Cursor@a,w,c
   654  0007E2  A4D8               	btfss	status,2,c
   655  0007E4  0012               	return	
   656                           
   657                           ;lcd.h: 53: {
   658                           ;lcd.h: 54: temp = 0xC0 + b - 1;
   659  0007E6  5012               	movf	Lcd_Set_Cursor@b,w,c
   660  0007E8  0FBF               	addlw	191
   661  0007EA  6E16               	movwf	Lcd_Set_Cursor@temp,c
   662                           
   663                           ;lcd.h: 55: z = temp>>4;
   664  0007EC  3816               	swapf	Lcd_Set_Cursor@temp,w,c
   665  0007EE  0B0F               	andlw	15
   666  0007F0  6E14               	movwf	Lcd_Set_Cursor@z,c
   667                           
   668                           ;lcd.h: 56: y = temp & 0x0F;
   669  0007F2  5016               	movf	Lcd_Set_Cursor@temp,w,c
   670  0007F4  0B0F               	andlw	15
   671  0007F6  6E15               	movwf	Lcd_Set_Cursor@y,c
   672                           
   673                           ;lcd.h: 57: Lcd_Cmd(z);
   674  0007F8  5014               	movf	Lcd_Set_Cursor@z,w,c
   675  0007FA  EC5A  F004         	call	_Lcd_Cmd
   676                           
   677                           ;lcd.h: 58: Lcd_Cmd(y);
   678  0007FE  5015               	movf	Lcd_Set_Cursor@y,w,c
   679  000800  EC5A  F004         	call	_Lcd_Cmd
   680  000804  0012               	return	
   681  000806                     __end_of_Lcd_Set_Cursor:
   682                           	opt stack 0
   683                           tblptru	equ	0xFF8
   684                           tblptrh	equ	0xFF7
   685                           tblptrl	equ	0xFF6
   686                           tablat	equ	0xFF5
   687                           intcon	equ	0xFF2
   688                           wreg	equ	0xFE8
   689                           status	equ	0xFD8
   690                           
   691 ;; *************** function _Lcd_Init *****************
   692 ;; Defined at:
   693 ;;		line 62 in file "lcd.h"
   694 ;; Parameters:    Size  Location     Type
   695 ;;		None
   696 ;; Auto vars:     Size  Location     Type
   697 ;;		None
   698 ;; Return value:  Size  Location     Type
   699 ;;                  1    wreg      void 
   700 ;; Registers used:
   701 ;;		wreg, status,2, cstack
   702 ;; Tracked objects:
   703 ;;		On entry : 0/0
   704 ;;		On exit  : 0/0
   705 ;;		Unchanged: 0/0
   706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   707 ;;      Params:         0       0       0       0       0       0       0
   708 ;;      Locals:         0       0       0       0       0       0       0
   709 ;;      Temps:          1       0       0       0       0       0       0
   710 ;;      Totals:         1       0       0       0       0       0       0
   711 ;;Total ram usage:        1 bytes
   712 ;; Hardware stack levels used:    1
   713 ;; Hardware stack levels required when called:    3
   714 ;; This function calls:
   715 ;;		_Lcd_Cmd
   716 ;;		_Lcd_Port
   717 ;; This function is called by:
   718 ;;		_main
   719 ;; This function uses a non-reentrant model
   720 ;;
   721                           
   722                           	psect	text4
   723  000746                     __ptext4:
   724                           	opt stack 0
   725  000746                     _Lcd_Init:
   726                           	opt stack 27
   727                           
   728                           ;lcd.h: 64: Lcd_Port(0x00);
   729                           
   730                           ;incstack = 0
   731  000746  0E00               	movlw	0
   732  000748  EC44  F004         	call	_Lcd_Port
   733                           
   734                           ;lcd.h: 65: _delay((unsigned long)((20)*(8000000/4000.0)));
   735  00074C  0E34               	movlw	52
   736  00074E  6E12               	movwf	??_Lcd_Init& (0+255),c
   737  000750  0EF2               	movlw	242
   738  000752                     u217:
   739  000752  2EE8               	decfsz	wreg,f,c
   740  000754  D7FE               	bra	u217
   741  000756  2E12               	decfsz	??_Lcd_Init& (0+255),f,c
   742  000758  D7FC               	bra	u217
   743                           
   744                           ;lcd.h: 66: Lcd_Cmd(0x03);
   745  00075A  0E03               	movlw	3
   746  00075C  EC5A  F004         	call	_Lcd_Cmd
   747                           
   748                           ;lcd.h: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
   749  000760  0E0D               	movlw	13
   750  000762  6E12               	movwf	??_Lcd_Init& (0+255),c
   751  000764  0EFC               	movlw	252
   752  000766                     u227:
   753  000766  2EE8               	decfsz	wreg,f,c
   754  000768  D7FE               	bra	u227
   755  00076A  2E12               	decfsz	??_Lcd_Init& (0+255),f,c
   756  00076C  D7FC               	bra	u227
   757                           
   758                           ;lcd.h: 68: Lcd_Cmd(0x03);
   759  00076E  0E03               	movlw	3
   760  000770  EC5A  F004         	call	_Lcd_Cmd
   761                           
   762                           ;lcd.h: 69: _delay((unsigned long)((11)*(8000000/4000.0)));
   763  000774  0E1D               	movlw	29
   764  000776  6E12               	movwf	??_Lcd_Init& (0+255),c
   765  000778  0E91               	movlw	145
   766  00077A                     u237:
   767  00077A  2EE8               	decfsz	wreg,f,c
   768  00077C  D7FE               	bra	u237
   769  00077E  2E12               	decfsz	??_Lcd_Init& (0+255),f,c
   770  000780  D7FC               	bra	u237
   771  000782  F000               	nop	
   772                           
   773                           ;lcd.h: 70: Lcd_Cmd(0x03);
   774  000784  0E03               	movlw	3
   775  000786  EC5A  F004         	call	_Lcd_Cmd
   776                           
   777                           ;lcd.h: 72: Lcd_Cmd(0x02);
   778  00078A  0E02               	movlw	2
   779  00078C  EC5A  F004         	call	_Lcd_Cmd
   780                           
   781                           ;lcd.h: 73: Lcd_Cmd(0x02);
   782  000790  0E02               	movlw	2
   783  000792  EC5A  F004         	call	_Lcd_Cmd
   784                           
   785                           ;lcd.h: 74: Lcd_Cmd(0x08);
   786  000796  0E08               	movlw	8
   787  000798  EC5A  F004         	call	_Lcd_Cmd
   788                           
   789                           ;lcd.h: 75: Lcd_Cmd(0x00);
   790  00079C  0E00               	movlw	0
   791  00079E  EC5A  F004         	call	_Lcd_Cmd
   792                           
   793                           ;lcd.h: 76: Lcd_Cmd(0x0C);
   794  0007A2  0E0C               	movlw	12
   795  0007A4  EC5A  F004         	call	_Lcd_Cmd
   796                           
   797                           ;lcd.h: 77: Lcd_Cmd(0x00);
   798  0007A8  0E00               	movlw	0
   799  0007AA  EC5A  F004         	call	_Lcd_Cmd
   800                           
   801                           ;lcd.h: 78: Lcd_Cmd(0x06);
   802  0007AE  0E06               	movlw	6
   803  0007B0  EC5A  F004         	call	_Lcd_Cmd
   804  0007B4  0012               	return		;funcret
   805  0007B6                     __end_of_Lcd_Init:
   806                           	opt stack 0
   807                           tblptru	equ	0xFF8
   808                           tblptrh	equ	0xFF7
   809                           tblptrl	equ	0xFF6
   810                           tablat	equ	0xFF5
   811                           intcon	equ	0xFF2
   812                           wreg	equ	0xFE8
   813                           status	equ	0xFD8
   814                           
   815 ;; *************** function _Lcd_Clear *****************
   816 ;; Defined at:
   817 ;;		line 35 in file "lcd.h"
   818 ;; Parameters:    Size  Location     Type
   819 ;;		None
   820 ;; Auto vars:     Size  Location     Type
   821 ;;		None
   822 ;; Return value:  Size  Location     Type
   823 ;;                  2   40[None  ] int 
   824 ;; Registers used:
   825 ;;		wreg, status,2, cstack
   826 ;; Tracked objects:
   827 ;;		On entry : 0/0
   828 ;;		On exit  : 0/0
   829 ;;		Unchanged: 0/0
   830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   831 ;;      Params:         0       0       0       0       0       0       0
   832 ;;      Locals:         0       0       0       0       0       0       0
   833 ;;      Temps:          0       0       0       0       0       0       0
   834 ;;      Totals:         0       0       0       0       0       0       0
   835 ;;Total ram usage:        0 bytes
   836 ;; Hardware stack levels used:    1
   837 ;; Hardware stack levels required when called:    3
   838 ;; This function calls:
   839 ;;		_Lcd_Cmd
   840 ;; This function is called by:
   841 ;;		_main
   842 ;; This function uses a non-reentrant model
   843 ;;
   844                           
   845                           	psect	text5
   846  0008E8                     __ptext5:
   847                           	opt stack 0
   848  0008E8                     _Lcd_Clear:
   849                           	opt stack 27
   850                           
   851                           ;lcd.h: 37: Lcd_Cmd(0);
   852                           
   853                           ;incstack = 0
   854  0008E8  0E00               	movlw	0
   855  0008EA  EC5A  F004         	call	_Lcd_Cmd
   856                           
   857                           ;lcd.h: 38: Lcd_Cmd(1);
   858  0008EE  0E01               	movlw	1
   859  0008F0  EC5A  F004         	call	_Lcd_Cmd
   860  0008F4  0012               	return		;funcret
   861  0008F6                     __end_of_Lcd_Clear:
   862                           	opt stack 0
   863                           tblptru	equ	0xFF8
   864                           tblptrh	equ	0xFF7
   865                           tblptrl	equ	0xFF6
   866                           tablat	equ	0xFF5
   867                           intcon	equ	0xFF2
   868                           wreg	equ	0xFE8
   869                           status	equ	0xFD8
   870                           
   871 ;; *************** function _Lcd_Cmd *****************
   872 ;; Defined at:
   873 ;;		line 26 in file "lcd.h"
   874 ;; Parameters:    Size  Location     Type
   875 ;;  a               1    wreg     unsigned char 
   876 ;; Auto vars:     Size  Location     Type
   877 ;;  a               1   16[COMRAM] unsigned char 
   878 ;; Return value:  Size  Location     Type
   879 ;;                  1    wreg      void 
   880 ;; Registers used:
   881 ;;		wreg, status,2, cstack
   882 ;; Tracked objects:
   883 ;;		On entry : 0/0
   884 ;;		On exit  : 0/0
   885 ;;		Unchanged: 0/0
   886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   887 ;;      Params:         0       0       0       0       0       0       0
   888 ;;      Locals:         1       0       0       0       0       0       0
   889 ;;      Temps:          1       0       0       0       0       0       0
   890 ;;      Totals:         2       0       0       0       0       0       0
   891 ;;Total ram usage:        2 bytes
   892 ;; Hardware stack levels used:    1
   893 ;; Hardware stack levels required when called:    2
   894 ;; This function calls:
   895 ;;		_Lcd_Port
   896 ;; This function is called by:
   897 ;;		_Lcd_Clear
   898 ;;		_Lcd_Set_Cursor
   899 ;;		_Lcd_Init
   900 ;;		_Lcd_Shift_Right
   901 ;;		_Lcd_Shift_Left
   902 ;; This function uses a non-reentrant model
   903 ;;
   904                           
   905                           	psect	text6
   906  0008B4                     __ptext6:
   907                           	opt stack 0
   908  0008B4                     _Lcd_Cmd:
   909                           	opt stack 27
   910                           
   911                           ;incstack = 0
   912                           ;Lcd_Cmd@a stored from wreg
   913  0008B4  6E11               	movwf	Lcd_Cmd@a,c
   914                           
   915                           ;lcd.h: 28: RE2 = 0;
   916  0008B6  9484               	bcf	3972,2,c	;volatile
   917                           
   918                           ;lcd.h: 29: Lcd_Port(a);
   919  0008B8  5011               	movf	Lcd_Cmd@a,w,c
   920  0008BA  EC44  F004         	call	_Lcd_Port
   921                           
   922                           ;lcd.h: 30: RE1 = 1;
   923  0008BE  8284               	bsf	3972,1,c	;volatile
   924                           
   925                           ;lcd.h: 31: _delay((unsigned long)((4)*(8000000/4000.0)));
   926  0008C0  0E0B               	movlw	11
   927  0008C2  6E10               	movwf	??_Lcd_Cmd& (0+255),c
   928  0008C4  0E62               	movlw	98
   929  0008C6                     u247:
   930  0008C6  2EE8               	decfsz	wreg,f,c
   931  0008C8  D7FE               	bra	u247
   932  0008CA  2E10               	decfsz	??_Lcd_Cmd& (0+255),f,c
   933  0008CC  D7FC               	bra	u247
   934  0008CE  D000               	nop2	
   935                           
   936                           ;lcd.h: 32: RE1 = 0;
   937  0008D0  9284               	bcf	3972,1,c	;volatile
   938  0008D2  0012               	return		;funcret
   939  0008D4                     __end_of_Lcd_Cmd:
   940                           	opt stack 0
   941                           tblptru	equ	0xFF8
   942                           tblptrh	equ	0xFF7
   943                           tblptrl	equ	0xFF6
   944                           tablat	equ	0xFF5
   945                           intcon	equ	0xFF2
   946                           wreg	equ	0xFE8
   947                           status	equ	0xFD8
   948                           
   949 ;; *************** function _Lcd_Port *****************
   950 ;; Defined at:
   951 ;;		line 4 in file "lcd.h"
   952 ;; Parameters:    Size  Location     Type
   953 ;;  a               1    wreg     unsigned char 
   954 ;; Auto vars:     Size  Location     Type
   955 ;;  a               1   14[COMRAM] unsigned char 
   956 ;; Return value:  Size  Location     Type
   957 ;;                  1    wreg      void 
   958 ;; Registers used:
   959 ;;		wreg
   960 ;; Tracked objects:
   961 ;;		On entry : 0/0
   962 ;;		On exit  : 0/0
   963 ;;		Unchanged: 0/0
   964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   965 ;;      Params:         0       0       0       0       0       0       0
   966 ;;      Locals:         1       0       0       0       0       0       0
   967 ;;      Temps:          0       0       0       0       0       0       0
   968 ;;      Totals:         1       0       0       0       0       0       0
   969 ;;Total ram usage:        1 bytes
   970 ;; Hardware stack levels used:    1
   971 ;; Hardware stack levels required when called:    1
   972 ;; This function calls:
   973 ;;		Nothing
   974 ;; This function is called by:
   975 ;;		_Lcd_Cmd
   976 ;;		_Lcd_Init
   977 ;;		_Lcd_Write_Char
   978 ;; This function uses a non-reentrant model
   979 ;;
   980                           
   981                           	psect	text7
   982  000888                     __ptext7:
   983                           	opt stack 0
   984  000888                     _Lcd_Port:
   985                           	opt stack 27
   986                           
   987                           ;incstack = 0
   988                           ;Lcd_Port@a stored from wreg
   989  000888  6E0F               	movwf	Lcd_Port@a,c
   990                           
   991                           ;lcd.h: 6: if(a & 1)
   992  00088A  A00F               	btfss	Lcd_Port@a,0,c
   993  00088C  D002               	goto	l27
   994                           
   995                           ;lcd.h: 7: RD4 = 1;
   996  00088E  8883               	bsf	3971,4,c	;volatile
   997  000890  D001               	goto	l698
   998  000892                     l27:
   999                           
  1000                           ;lcd.h: 8: else
  1001                           ;lcd.h: 9: RD4 = 0;
  1002  000892  9883               	bcf	3971,4,c	;volatile
  1003  000894                     l698:
  1004                           
  1005                           ;lcd.h: 11: if(a & 2)
  1006  000894  A20F               	btfss	Lcd_Port@a,1,c
  1007  000896  D002               	goto	l29
  1008                           
  1009                           ;lcd.h: 12: RD5 = 1;
  1010  000898  8A83               	bsf	3971,5,c	;volatile
  1011  00089A  D001               	goto	l702
  1012  00089C                     l29:
  1013                           
  1014                           ;lcd.h: 13: else
  1015                           ;lcd.h: 14: RD5 = 0;
  1016  00089C  9A83               	bcf	3971,5,c	;volatile
  1017  00089E                     l702:
  1018                           
  1019                           ;lcd.h: 16: if(a & 4)
  1020  00089E  A40F               	btfss	Lcd_Port@a,2,c
  1021  0008A0  D002               	goto	l31
  1022                           
  1023                           ;lcd.h: 17: RD6 = 1;
  1024  0008A2  8C83               	bsf	3971,6,c	;volatile
  1025  0008A4  D001               	goto	l706
  1026  0008A6                     l31:
  1027                           
  1028                           ;lcd.h: 18: else
  1029                           ;lcd.h: 19: RD6 = 0;
  1030  0008A6  9C83               	bcf	3971,6,c	;volatile
  1031  0008A8                     l706:
  1032                           
  1033                           ;lcd.h: 21: if(a & 8)
  1034  0008A8  A60F               	btfss	Lcd_Port@a,3,c
  1035  0008AA  D002               	goto	l33
  1036                           
  1037                           ;lcd.h: 22: RD7 = 1;
  1038  0008AC  8E83               	bsf	3971,7,c	;volatile
  1039  0008AE  0012               	return	
  1040  0008B0                     l33:
  1041                           
  1042                           ;lcd.h: 23: else
  1043                           ;lcd.h: 24: RD7 = 0;
  1044  0008B0  9E83               	bcf	3971,7,c	;volatile
  1045  0008B2  0012               	return	
  1046  0008B4                     __end_of_Lcd_Port:
  1047                           	opt stack 0
  1048                           tblptru	equ	0xFF8
  1049                           tblptrh	equ	0xFF7
  1050                           tblptrl	equ	0xFF6
  1051                           tablat	equ	0xFF5
  1052                           intcon	equ	0xFF2
  1053                           wreg	equ	0xFE8
  1054                           status	equ	0xFD8
  1055                           
  1056 ;; *************** function _isr *****************
  1057 ;; Defined at:
  1058 ;;		line 26 in file "trabalho2.c"
  1059 ;; Parameters:    Size  Location     Type
  1060 ;;		None
  1061 ;; Auto vars:     Size  Location     Type
  1062 ;;		None
  1063 ;; Return value:  Size  Location     Type
  1064 ;;                  1    wreg      void 
  1065 ;; Registers used:
  1066 ;;		wreg, status,2
  1067 ;; Tracked objects:
  1068 ;;		On entry : 0/0
  1069 ;;		On exit  : 0/0
  1070 ;;		Unchanged: 0/0
  1071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1072 ;;      Params:         0       0       0       0       0       0       0
  1073 ;;      Locals:         0       0       0       0       0       0       0
  1074 ;;      Temps:         14       0       0       0       0       0       0
  1075 ;;      Totals:        14       0       0       0       0       0       0
  1076 ;;Total ram usage:       14 bytes
  1077 ;; Hardware stack levels used:    1
  1078 ;; This function calls:
  1079 ;;		Nothing
  1080 ;; This function is called by:
  1081 ;;		Interrupt level 2
  1082 ;; This function uses a non-reentrant model
  1083 ;;
  1084                           
  1085                           	psect	intcode
  1086  000008                     __pintcode:
  1087                           	opt stack 0
  1088  000008                     _isr:
  1089                           	opt stack 27
  1090                           
  1091                           ;incstack = 0
  1092  000008  821A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1093  00000A  ED5D  F003         	call	int_func,f	;refresh shadow registers
  1094                           tblptru	equ	0xFF8
  1095                           tblptrh	equ	0xFF7
  1096                           tblptrl	equ	0xFF6
  1097                           tablat	equ	0xFF5
  1098                           intcon	equ	0xFF2
  1099                           wreg	equ	0xFE8
  1100                           status	equ	0xFD8
  1101                           
  1102                           	psect	intcode_body
  1103  0006BA                     __pintcode_body:
  1104                           	opt stack 27
  1105  0006BA                     int_func:
  1106                           	opt stack 27
  1107  0006BA  0006               	pop		; remove dummy address from shadow register refresh
  1108  0006BC  CFFA F001          	movff	pclath,??_isr
  1109  0006C0  CFFB F002          	movff	pclatu,??_isr+1
  1110  0006C4  CFE9 F003          	movff	fsr0l,??_isr+2
  1111  0006C8  CFEA F004          	movff	fsr0h,??_isr+3
  1112  0006CC  CFE1 F005          	movff	fsr1l,??_isr+4
  1113  0006D0  CFE2 F006          	movff	fsr1h,??_isr+5
  1114  0006D4  CFD9 F007          	movff	fsr2l,??_isr+6
  1115  0006D8  CFDA F008          	movff	fsr2h,??_isr+7
  1116  0006DC  CFF3 F009          	movff	prodl,??_isr+8
  1117  0006E0  CFF4 F00A          	movff	prodh,??_isr+9
  1118  0006E4  CFF6 F00B          	movff	tblptrl,??_isr+10
  1119  0006E8  CFF7 F00C          	movff	tblptrh,??_isr+11
  1120  0006EC  CFF8 F00D          	movff	tblptru,??_isr+12
  1121  0006F0  CFF5 F00E          	movff	tablat,??_isr+13
  1122                           
  1123                           ;trabalho2.c: 28: if (INTCONbits.INT0IF && INTCONbits.INT0IE)
  1124  0006F4  B2F2               	btfsc	intcon,1,c	;volatile
  1125  0006F6  A8F2               	btfss	intcon,4,c	;volatile
  1126  0006F8  D008               	goto	i2l71
  1127                           
  1128                           ;trabalho2.c: 29: {
  1129                           ;trabalho2.c: 30: INTCONbits.INT0IF = 0;
  1130  0006FA  92F2               	bcf	intcon,1,c	;volatile
  1131                           
  1132                           ;trabalho2.c: 31: op = !op;
  1133  0006FC  5019               	movf	_op,w,c
  1134  0006FE  A4D8               	btfss	status,2,c
  1135  000700  D002               	goto	i2u10_40
  1136  000702  0E01               	movlw	1
  1137  000704  D001               	goto	i2u11_40
  1138  000706                     i2u10_40:
  1139  000706  0E00               	movlw	0
  1140  000708                     i2u11_40:
  1141  000708  6E19               	movwf	_op,c
  1142  00070A                     i2l71:
  1143  00070A  C00E  FFF5         	movff	??_isr+13,tablat
  1144  00070E  C00D  FFF8         	movff	??_isr+12,tblptru
  1145  000712  C00C  FFF7         	movff	??_isr+11,tblptrh
  1146  000716  C00B  FFF6         	movff	??_isr+10,tblptrl
  1147  00071A  C00A  FFF4         	movff	??_isr+9,prodh
  1148  00071E  C009  FFF3         	movff	??_isr+8,prodl
  1149  000722  C008  FFDA         	movff	??_isr+7,fsr2h
  1150  000726  C007  FFD9         	movff	??_isr+6,fsr2l
  1151  00072A  C006  FFE2         	movff	??_isr+5,fsr1h
  1152  00072E  C005  FFE1         	movff	??_isr+4,fsr1l
  1153  000732  C004  FFEA         	movff	??_isr+3,fsr0h
  1154  000736  C003  FFE9         	movff	??_isr+2,fsr0l
  1155  00073A  C002  FFFB         	movff	??_isr+1,pclatu
  1156  00073E  C001  FFFA         	movff	??_isr,pclath
  1157  000742  921A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1158  000744  0011               	retfie		f
  1159  000746                     __end_of_isr:
  1160                           	opt stack 0
  1161                           pclatu	equ	0xFFB
  1162                           pclath	equ	0xFFA
  1163                           tblptru	equ	0xFF8
  1164                           tblptrh	equ	0xFF7
  1165                           tblptrl	equ	0xFF6
  1166                           tablat	equ	0xFF5
  1167                           prodh	equ	0xFF4
  1168                           prodl	equ	0xFF3
  1169                           intcon	equ	0xFF2
  1170                           fsr0h	equ	0xFEA
  1171                           fsr0l	equ	0xFE9
  1172                           wreg	equ	0xFE8
  1173                           fsr1h	equ	0xFE2
  1174                           fsr1l	equ	0xFE1
  1175                           fsr2h	equ	0xFDA
  1176                           fsr2l	equ	0xFD9
  1177                           status	equ	0xFD8
  1178                           pclatu	equ	0xFFB
  1179                           pclath	equ	0xFFA
  1180                           tblptru	equ	0xFF8
  1181                           tblptrh	equ	0xFF7
  1182                           tblptrl	equ	0xFF6
  1183                           tablat	equ	0xFF5
  1184                           prodh	equ	0xFF4
  1185                           prodl	equ	0xFF3
  1186                           intcon	equ	0xFF2
  1187                           fsr0h	equ	0xFEA
  1188                           fsr0l	equ	0xFE9
  1189                           wreg	equ	0xFE8
  1190                           fsr1h	equ	0xFE2
  1191                           fsr1l	equ	0xFE1
  1192                           fsr2h	equ	0xFDA
  1193                           fsr2l	equ	0xFD9
  1194                           status	equ	0xFD8
  1195                           
  1196                           	psect	rparam
  1197  0000                     pclatu	equ	0xFFB
  1198                           pclath	equ	0xFFA
  1199                           tblptru	equ	0xFF8
  1200                           tblptrh	equ	0xFF7
  1201                           tblptrl	equ	0xFF6
  1202                           tablat	equ	0xFF5
  1203                           prodh	equ	0xFF4
  1204                           prodl	equ	0xFF3
  1205                           intcon	equ	0xFF2
  1206                           fsr0h	equ	0xFEA
  1207                           fsr0l	equ	0xFE9
  1208                           wreg	equ	0xFE8
  1209                           fsr1h	equ	0xFE2
  1210                           fsr1l	equ	0xFE1
  1211                           fsr2h	equ	0xFDA
  1212                           fsr2l	equ	0xFD9
  1213                           status	equ	0xFD8
  1214                           
  1215                           	psect	temp
  1216  00001A                     btemp:
  1217                           	opt stack 0
  1218  00001A                     	ds	1
  1219  0000                     int$flags	set	btemp
  1220                           pclatu	equ	0xFFB
  1221                           pclath	equ	0xFFA
  1222                           tblptru	equ	0xFF8
  1223                           tblptrh	equ	0xFF7
  1224                           tblptrl	equ	0xFF6
  1225                           tablat	equ	0xFF5
  1226                           prodh	equ	0xFF4
  1227                           prodl	equ	0xFF3
  1228                           intcon	equ	0xFF2
  1229                           fsr0h	equ	0xFEA
  1230                           fsr0l	equ	0xFE9
  1231                           wreg	equ	0xFE8
  1232                           fsr1h	equ	0xFE2
  1233                           fsr1l	equ	0xFE1
  1234                           fsr2h	equ	0xFDA
  1235                           fsr2l	equ	0xFD9
  1236                           status	equ	0xFD8


Data Sizes:
    Strings     44
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     24      25
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 15
		 -> STR_4(CODE[9]), STR_3(CODE[12]), STR_2(CODE[8]), STR_1(CODE[15]), 


Critical Paths under _main in COMRAM

    _main->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1277
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2     466
                                             18 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     120
                                             15 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     601
                                             17 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     135
                                             17 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0      75
                                             15 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      60
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     18      19       1       19.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      19      15        0.0%
DATA                 0      0      19       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Jun 17 11:17:09 2019

                       l31 08A6                         l33 08B0                         l27 0892  
                       l29 089C                         _op 0019                        l702 089E  
                      l706 08A8                        l862 0830                        l848 07DE  
                      l698 0894                        l858 0810                        l890 0684  
                      l882 0650                        l896 06B0                        l888 067C  
                      _RE1 007C21                        _RD4 007C1C                        _RE2 007C22  
                      _RD5 007C1D                        _RD6 007C1E                        _RD7 007C1F  
                      u207 087E                        u217 0752                        u227 0766  
                      u237 077A                        u247 08C6                        u197 086C  
                      _isr 0008                        wreg 000FE8               __CFG_LVP$OFF 000000  
             __CFG_WDT$OFF 000000                       ?_isr 0001                       STR_1 0601  
                     STR_2 0625                       STR_3 0610                       STR_4 061C  
                     i2l71 070A               __CFG_PWRT$ON 000000          ?_Lcd_Write_String 0013  
                     _main 062E                       fsr0h 000FEA                       fsr1h 000FE2  
                     fsr2h 000FDA                       fsr0l 000FE9                       fsr1l 000FE1  
                     fsr2l 000FD9                       btemp 001A                       prodh 000FF4  
                     prodl 000FF3                       start 000E         ??_Lcd_Write_String 0015  
          __end_of_Lcd_Cmd 08D4               ___param_bank 000000                      ??_isr 0001  
                    ?_main 0001    __size_of_Lcd_Set_Cursor 0050                      _TRISB 000F93  
                    _TRISD 000F95                      _TRISE 000F96                      pclath 000FFA  
                    tablat 000FF5                      status 000FD8           __end_of_Lcd_Init 07B6  
         __end_of_Lcd_Port 08B4             __CFG_MCLRE$OFF 000000            __initialization 08D4  
             __end_of_main 06BA                     ??_main 0019         __size_of_Lcd_Clear 000E  
            __activetblptr 000001                     _ADCON1 000FC1                  ??_Lcd_Cmd 0010  
  __size_of_Lcd_Write_Char 0038               __mediumconst 0000                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8            Lcd_Set_Cursor@a 0013  
          Lcd_Set_Cursor@b 0012            Lcd_Set_Cursor@y 0015            Lcd_Set_Cursor@z 0014  
               __accesstop 0080    __end_of__initialization 08D6          __end_of_Lcd_Clear 08F6  
            ___rparam_used 000001             __pcstackCOMRAM 0001             _Lcd_Set_Cursor 07B6  
                ?_Lcd_Init 0001                  ?_Lcd_Port 0001  __size_of_Lcd_Write_String 004A  
   __end_of_Lcd_Set_Cursor 0806                    i2u10_40 0706                    i2u11_40 0708  
               ??_Lcd_Init 0012                 ??_Lcd_Port 000F             _Lcd_Write_Char 0850  
                  _Lcd_Cmd 08B4                    __Hparam 0000                    __Lparam 0000  
             __psmallconst 0600                    __pcinit 08D4                    __ramtop 0600  
          ?_Lcd_Set_Cursor 0012                    __ptext0 062E                    __ptext1 0806  
                  __ptext2 0850                    __ptext3 07B6                    __ptext4 0746  
                  __ptext5 08E8                    __ptext6 08B4                    __ptext7 0888  
             __size_of_isr 073E     __end_of_Lcd_Write_Char 0888             __pintcode_body 06BA  
     end_of_initialization 08D6                    int_func 06BA                  Lcd_Port@a 000F  
          ?_Lcd_Write_Char 0001          Lcd_Write_String@a 0013          Lcd_Write_String@i 0017  
                _Lcd_Clear 08E8           _Lcd_Write_String 0806        start_initialization 08D4  
              __end_of_isr 0746          __size_of_Lcd_Init 0070          __size_of_Lcd_Port 002C  
         __CFG_OSC$INTIO67 000000                 ?_Lcd_Clear 0001            Lcd_Write_Char@a 0012  
          Lcd_Write_Char@y 0011                __pbssCOMRAM 0019                   ?_Lcd_Cmd 0001  
         ??_Lcd_Set_Cursor 0013                  __pintcode 0008                __smallconst 0600  
                 Lcd_Cmd@a 0011                ??_Lcd_Clear 0012           ??_Lcd_Write_Char 0010  
                 _Lcd_Init 0746                   _Lcd_Port 0888   __end_of_Lcd_Write_String 0850  
         __size_of_Lcd_Cmd 0020                   __Hrparam 0000                   __Lrparam 0000  
             __Lsmallconst 0600              __size_of_main 008C                   int$flags 001A  
               _INTCONbits 000FF2         Lcd_Write_Char@temp 0010                   intlevel2 0000  
       Lcd_Set_Cursor@temp 0016  
